/*--------------------------------*- C++ -*----------------------------------*|
| =========                 |                                                 |
| \      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \    /   O peration     | Version:  2312                                  |
|   \  /    A nd           | Website:  www.openfoam.com                      |
|    \/     M anipulation  |                                                 |
|*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    arch        "LSB;label=32;scalar=64";
    class       volScalarField;
    location    "0";
    object      ID;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

internalField #codeStream
{
        codeInclude
        #{
                #include "fvCFD.H"
                #include "Ostream.H"
        #};

        codeOptions
        #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude 
        #};
        codeLibs
        #{
                -lmeshTools \
                -lfiniteVolume 
        #};

        code
        #{

        const IOdictionary& d = static_cast<const IOdictionary&>(dict);
        const fvMesh& mesh = refCast<const fvMesh>(d.db());
        const scalar pi = 3.141592653589793;
        scalarField ID(mesh.nCells(), 0.);
        //########### Aqui entra as informações dos tumores(raio,excentricidade,posições e inclinação)

        //##########
        
        forAll(ID, i)
        {
                const scalar x = mesh.C()[i][0];
                const scalar y = mesh.C()[i][1];
                const scalar z = mesh.C()[i][2];
        //###### Aqui entra as informações para definir região do tumor (circular ou elíptica)
       
        //######
       
        }
        ID.writeEntry("", os);

        #};
};

boundaryField
{
    leftWall
    {
        type            fixedValue;
        value           uniform 0;
    }
    rightWall
    {
        type            fixedValue;
        value           uniform 0;
    }
    lowerWall
    {
        type            fixedValue;
        value           uniform 0;
    }
    upperWall
    {
        type            fixedValue;
        value           uniform 0;
    }
    defaultFaces
    {
        type            empty;
    }
}

// ************************************************************************* //
